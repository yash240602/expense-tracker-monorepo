AWSTemplateFormatVersion: '2010-09-09'
Description: 'Autoscaling group for microservices with Mysql, and Kafka'

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Type: String
    Default: t3.nano
  AMI:
    Type: AWS::EC2::Image::Id
    Description: ECS-optimized AMI ID
  MySQLRootPassword:
    Type: String
    NoEcho: true
  MySQLUser:
    Type: String
  MySQLRootUser:
    Type: String
  MySQLPassword:
    Type: String
    NoEcho: true
  KafkaAdvertisedListeners:
    Type: String
    Default: PLAINTEXT://kafka.myapp.local:9092
  ECSClusterName:
    Type: String
    Description: Name of the ECS Cluster
  PublicLoadBalancer:
    Type: String
    Description: Load Balancer ARN to use during deployment
  PublicLoadBalancerSg:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Load Balancer Security Group ID
  VPCCIDR:
    Type: String
    Description: CIDR of VPC

Resources:
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: myapp.local
      Vpc: !Ref VPC

  MySQLLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}/mysql"
      RetentionInDays: 30

  KafkaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}/kafka"
      RetentionInDays: 30

  KafkaServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: kafka
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300

  MySQLServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mysql
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300


  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecsTaskExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                Resource: "*"

  MySQLTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: mysql-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: mysql
          Image: mysql:8.0
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MySQLLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: mysql
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: !Ref MySQLRootPassword
            - Name: MYSQL_INNODB_BUFFER_POOL_SIZE
              Value: "20M"
            - Name: MYSQL_MAX_CONNECTIONS
              Value: "10"
          PortMappings:
            - ContainerPort: 3306

  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kafka-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512"
      Memory: "1024"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: zookeeper
          Image: confluentinc/cp-zookeeper:7.4.4
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: zookeeper
          Environment:
            - Name: ZOOKEEPER_CLIENT_PORT
              Value: "2181"
            - Name: ZOOKEEPER_TICK_TIME
              Value: "2000"
          PortMappings:
            - ContainerPort: 2181
        - Name: kafka
          Image: confluentinc/cp-kafka:7.4.4
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kafka
          DependsOn:
            - ContainerName: zookeeper
              Condition: START
          Environment:
            - Name: KAFKA_BROKER_ID
              Value: "1"
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: "localhost:2181"
            - Name: KAFKA_ADVERTISED_LISTENERS
              Value: "PLAINTEXT://kafka.myapp.local:9092"
            - Name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              Value: "PLAINTEXT:PLAINTEXT"
            - Name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: "1"
            - Name: KAFKA_NUM_PARTITIONS
              Value: "1"
            - Name: KAFKA_NUM_NETWORK_THREADS
              Value: "1"
            - Name: KAFKA_NUM_IO_THREADS
              Value: "1"
            - Name: KAFKA_HEAP_OPTS
              Value: "-Xmx256M -Xms256M"
          PortMappings:
            - ContainerPort: 9092

  MySQLService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MySQLTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref EC2SecurityGroup]
          Subnets: !Ref PrivateSubnets
      ServiceRegistries:
        - RegistryArn: !GetAtt MySQLServiceDiscovery.Arn

  KafkaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref KafkaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref EC2SecurityGroup]
          Subnets: !Ref PrivateSubnets
      ServiceRegistries:
        - RegistryArn: !GetAtt KafkaServiceDiscovery.Arn

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref PublicLoadBalancerSg
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !Ref PublicLoadBalancerSg
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300



Outputs:
  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
  ServiceDiscoveryNamespace:
    Description: Service Discovery Namespace
    Value: myapp.local
  KafkaServiceEndpoint:
    Description: Kafka Service Endpoint
    Value: kafka.myapp.local
  MySQLServiceEndpoint:
    Description: MySQL Service Endpoint
    Value: mysql.myapp.local
